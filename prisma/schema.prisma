datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

generator client {
  provider = "prisma-client-js"
}

model ActivityLog {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  action    String
  timestamp DateTime @default(now())
  ipAddress String?  @db.VarChar(255) 

  @@map("activity_logs")
}

model Invitation {
  id          String   @id @default(cuid())
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      String
  email       String   @db.VarChar(255) // 明确指定长度
  role        String   @db.VarChar(50)
  invitedBy   User     @relation(fields: [invitedById], references: [id])
  invitedById String
  invitedAt   DateTime @default(now())
  status      String   @default("pending") @db.VarChar(50)

  @@map("invitations")
}

model TeamMember {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  team     Team     @relation(fields: [teamId], references: [id])
  teamId   String
  role     String   @db.VarChar(50)
  joinedAt DateTime @default(now())

  @@map("team_members")
}

model Team {
  id                   String        @id @default(cuid())
  name                 String        @db.VarChar(255)
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @default(now()) @map("updated_at")
  stripeCustomerId     String?       @unique @map("stripe_customer_id") @db.VarChar(255)
  stripeSubscriptionId String?       @unique @map("stripe_subscription_id") @db.VarChar(255)
  stripeProductId      String?       @map("stripe_product_id") @db.VarChar(255)
  planName             String?       @map("plan_name") @db.VarChar(100)
  subscriptionStatus   String?       @map("subscription_status") @db.VarChar(50)
  activityLogs         ActivityLog[]
  invitations          Invitation[]
  members              TeamMember[]

  @@map("teams")
}

model User {
  id            String        @id @default(cuid())
  name          String?       @db.VarChar(255)
  email         String        @unique @db.VarChar(255)
  emailVerified DateTime?
  image         String?       @db.VarChar(255)
  passwordHash  String        @map("password_hash") @db.VarChar(255)
  role          String        @default("member") @db.VarChar(50)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")
  activityLogs  ActivityLog[]
  invitations   Invitation[]
  teamMembers   TeamMember[]
  accounts      Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String  @db.VarChar(50)
  provider          String  @db.VarChar(50)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.VarChar(50)
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.VarChar(255)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("accounts")
  @@unique([provider, providerAccountId])
}